drop table if exists requests;
drop table if exists compilations_events;
drop table if exists compilations;
drop table if exists events_places;
drop table if exists events;
drop table if exists users;
drop table if exists categories;
drop table if exists places;
drop table if exists locations;
drop table if exists place_types;

create table if not exists users
(
    id    bigint generated by default as identity
        primary key,
    email varchar(255)
        constraint uk_email_user
            unique,
    name  varchar(64)
);

create table if not exists locations
(
    id  bigint generated by default as identity
        primary key,
    lat real not null,
    lon real not null
);

create table if not exists categories
(
    id   bigint generated by default as identity
        primary key,
    name varchar(255)
        constraint uk_name_category
            unique
);

create table if not exists events
(
    id                 bigint generated by default as identity
        primary key,
    annotation         varchar(1024) not null,
    available          boolean,
    confirmed_requests integer not null,
    created_on         timestamp,
    description        varchar(2056),
    event_date         timestamp not null,
    paid               boolean not null,
    participant_limit  integer,
    published_on       timestamp,
    request_moderation boolean,
    state              varchar(255),
    title              varchar(1024) not null,
    views              bigint  not null,
    place_names        varchar(1024),
    category_id        bigint
        constraint fk_events_categories
            references categories,
    initiator_id       bigint
        constraint fk_events_users
            references users,
    location_id        bigint
        constraint fk_events_locations
            references locations
);

create table if not exists requests
(
    id           bigint generated by default as identity
    primary key,
    created      timestamp,
    status       varchar(255),
    event_id     bigint
    constraint fk_requests_events
    references events,
    requester_id bigint
    constraint fk_requests_users
    references users
    );

create table if not exists compilations
(
    id     bigint generated by default as identity
        primary key,
    pinned boolean,
    title  varchar(255)
);

create table if not exists compilations_events
(
    compilation_id bigint not null
        constraint fk_compilations
            references compilations,
    events_id      bigint not null
        constraint fk_events
            references events
);

create table if not exists place_types
(
    id   bigint generated by default as identity
        primary key,
    name varchar(100) not null
);

create table if not exists places
(
    id            bigint generated by default as identity
        primary key,
    description   varchar(2056),
    name          varchar(256) not null
        constraint uk_places_name_unique
            unique,
    radius        real         not null,
    available     boolean,
    location_id   bigint
        constraint fk_places_locations
            references locations,
    place_type_id bigint
        constraint fk_places_place_types
            references place_types
);

create table if not exists events_places
(
    event_id  bigint not null
        constraint fk_places_events
            references events,
    places_id bigint not null
        constraint fk_events_places
            references places,
    primary key (event_id, places_id)
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        -- переводим градусы широты в радианы
        rad_lat1 = pi() * lat1 / 180;
        -- переводим градусы долготы в радианы
        rad_lat2 = pi() * lat2 / 180;
        -- находим разность долгот
        theta = lon1 - lon2;
        -- переводим градусы в радианы
        rad_theta = pi() * theta / 180;
        -- находим длину ортодромии
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
            THEN dist = 1;
        END IF;

        dist = acos(dist);
        -- переводим радианы в градусы
        dist = dist * 180 / pi();
        -- переводим градусы в километры
        dist = dist * 60 * 1.8524;

        RETURN dist;
    END IF;
END;
'
LANGUAGE PLPGSQL;